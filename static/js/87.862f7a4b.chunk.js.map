{"version":3,"file":"static/js/87.862f7a4b.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","components/Form/Form.js","components/ListItem/ListItem.styled.js","components/ListItem/ListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsPage.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormBox = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 20px;\n`;\n\nexport const Input = styled.input`\n  padding: 7px 20px 7px 3px;\n`;","import shortid from 'shortid';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {addContactThunk} from 'redux/asyncThunk';\n\nimport { selectContacts } from 'redux/selectors';\n\nimport { FormBox, Input } from './Form.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n \n\n  const inputChangeHandler = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        throw new Error('invalid input name');\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    \n    const newContact = {\n      id: shortid.generate(),\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n\n    if (checkExistsName(name)) {\n      alert(`${name} is already in the phonebook.`);\n    } else if (checkExistsNumber(number)) {\n      alert(`${number} is already in the phonbook.`);\n    } else if (checkExistsQuery(name,number)) {\n      alert(\"Enter the contact`s name and phone number!\");\n    } else { \n    dispatch(addContactThunk(newContact));\n  }\n    e.target.reset();\n  };\n  const checkExistsName = name => {\n    return contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n  };\n\n  const checkExistsNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const checkExistsQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  return (\n    <>\n      <FormBox onSubmit={submitHandler}>\n        <label>\n          Name:\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+(([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ ])?[a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$\"\n            maxLength={35}\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={inputChangeHandler}\n          />\n        </label>\n        <label>\n          Number:\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            maxLength={35}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={inputChangeHandler}\n          />\n        </label>\n        <button type=\"submit\">\n        </button>\n      </FormBox>\n    </>\n  );\n};","import styled from '@emotion/styled';\n\nexport const Contact = styled.p`\n  font-size: 20px;\n  margin: 0;\n`;\n\nexport const Item = styled.li`\n  max-width: 600px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 10px;\n  margin-bottom: 10px;\n  border: 1px solid #0000001a;\n  border-radius: 5px;\n  background-color: #baf3f505;\n`;\n\nexport const Button = styled.button`\n  width: 42px;\n  height: 28px;\n  padding: 0;\n  border-radius: 5px;\n  border: 1px solid grey;\n  background-color: #fcfcfc;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {deleteContactThunk} from 'redux/asyncThunk';\n\nimport {\n  Item,\n  Button,\n} from './ListItem.styled';\n\nexport function ListItem ({ name, number, id }) {\n  const dispatch = useDispatch();\n\n  return (\n    <Item key={id}>\n      <p>{name}</p>\n      <p>{number}</p>\n      <Button type=\"button\" onClick={() => dispatch(deleteContactThunk(id))}>\n      Delete</Button>\n    </Item>\n  );\n};\n\nListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.func.isRequired,\n};\n\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  padding: 10px 15px;\n  border: 1px solid black;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 30px;\n  margin-bottom: 15px;\n`;\n\nexport const Title = styled.p`\n  margin: 0;\n`;","import { useSelector } from 'react-redux';\nimport { ListItem } from 'components/ListItem/ListItem';\nimport { List } from './ContactList.styled';\nimport { getFilteredContacts } from 'redux/selectors';\n\nexport function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  console.log(contacts);\n\n\n  return (\n        <List>\n          {contacts.map(({ id, name, number }) => (\n            <ListItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n            />\n          ))}\n        </List>\n      );\n    };","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  width: calc(100% - 40px);\n  margin: 20px;\n  gap: 10px;\n  font-size: 18px;\n`;\n\nexport const Input = styled.input`\n  flex-grow: 1;\n  padding: 3px;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport { filterContacts } from '../../redux/filterSlice';\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      <Input\n        type=\"text\"\n        placeholder=\"Find contacts by name...\"\n        value={filter}\n        onChange={evt => dispatch(filterContacts(evt.target.value))}\n      />\n    </Label>\n  );\n};","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from '../components/Form/Form';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { getContactsThunk } from 'redux/asyncThunk';\nimport { selectIsLoggedIn } from '../redux/selectors';\n\nexport default function Tasks() {\n  const isLoading = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n  \n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n    <Helmet>\n      <title>Phonebook</title>\n    </Helmet>\n    <ContactForm />\n    <div>{isLoading && 'Request in progress...'}</div>\n    <Filter/>\n    <ContactList/>\n    </>\n  );\n}","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["FormBox","styled","Input","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","inputChangeHandler","e","currentTarget","value","Error","checkExistsName","find","contact","toLowerCase","checkExistsNumber","checkExistsQuery","trim","onSubmit","preventDefault","newContact","id","shortid","target","elements","alert","addContactThunk","reset","type","pattern","maxLength","title","required","onChange","Item","Button","ListItem","onClick","deleteContactThunk","List","ContactList","getFilteredContacts","console","log","map","Label","Filter","filter","selectFilter","placeholder","evt","filterContacts","Tasks","isLoading","selectIsLoggedIn","useEffect","getContactsThunk","Helmet","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","LN2","step"],"sourceRoot":""}